{"ast":null,"code":"import { useEffect } from 'react';\nvar config = {\n  attributes: true,\n  characterData: true,\n  subtree: true,\n  childList: true\n};\n/**\r\n *\r\n * useMutationObserver hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed\r\n * @param {MutationCallback} callback Function that needs to be fired on mutation\r\n * @param {MutationObserverInit} options\r\n */\nfunction useMutationObserver(ref, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config;\n  useEffect(() => {\n    // Create an observer instance linked to the callback function\n    if (ref.current) {\n      const observer = new MutationObserver(callback);\n      // Start observing the target node for configured mutations\n      observer.observe(ref.current, options);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [callback, options]);\n}\nexport default useMutationObserver;","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import { useEffect } from 'react';\n\nvar config = {\r\n    attributes: true,\r\n    characterData: true,\r\n    subtree: true,\r\n    childList: true\r\n};\r\n/**\r\n *\r\n * useMutationObserver hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed\r\n * @param {MutationCallback} callback Function that needs to be fired on mutation\r\n * @param {MutationObserverInit} options\r\n */\r\nfunction useMutationObserver(ref, callback, options = config) {\r\n    useEffect(() => {\r\n        // Create an observer instance linked to the callback function\r\n        if (ref.current) {\r\n            const observer = new MutationObserver(callback);\r\n            // Start observing the target node for configured mutations\r\n            observer.observe(ref.current, options);\r\n            return () => {\r\n                observer.disconnect();\r\n            };\r\n        }\r\n    }, [callback, options]);\r\n}\n\nexport default useMutationObserver;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}